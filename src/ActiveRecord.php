<?php
/*
 * @copyright 2019-2020 Dicr http://dicr.org
 * @author Igor A Tarasov <develop@dicr.org>
 * @license proprietary
 * @version 28.09.20 02:31:24
 */

declare(strict_types = 1);
namespace dicr\site;

use Yii;
use yii\base\InvalidConfigException;
use yii\caching\TagDependency;

/**
 * Базовая модель.
 *
 * @method void upsert($runValidation = true, $attributes = null)
 * сохраняет методом upsert (без получения autogenerated ключей !!!)
 */
abstract class ActiveRecord extends \yii\db\ActiveRecord
{
    /**
     * @inheritDoc
     */
    public function behaviors() : array
    {
        return parent::behaviors() + [
                'upsert' => UpsertBehavior::class
            ];
    }

    /**
     * @inheritDoc
     */
    public function afterSave($insert, $changedAttributes) : void
    {
        parent::afterSave($insert, $changedAttributes);

        // insert и update вызывают только afterSave(true)
        // update вызывает updateAll
        // delete вызывает deleteAll
        if ($insert && ! empty($changedAttributes)) {
            self::invalidateClassCache();
        }
    }

    /**
     * @inheritDoc
     */
    public static function updateAll($attributes, $condition = '', $params = []) : int
    {
        $ret = parent::updateAll($attributes, $condition, $params);

        if ($ret) {
            static::invalidateClassCache();
        }

        return $ret;
    }

    /**
     * @inheritDoc
     */
    public static function updateAllCounters($counters, $condition = '', $params = []) : int
    {
        $ret = parent::updateAllCounters($counters, $condition, $params);

        if ($ret) {
            static::invalidateClassCache();
        }

        return $ret;
    }

    /**
     * @inheritDoc
     */
    public static function deleteAll($condition = null, $params = []) : int
    {
        $ret = parent::deleteAll($condition, $params);

        if ($ret) {
            static::invalidateClassCache();
        }

        return $ret;
    }

    /**
     * Аннулировать кэш модели.
     */
    public static function invalidateClassCache() : void
    {
        if (! empty(Yii::$app->cache)) {
            TagDependency::invalidate(Yii::$app->cache, [static::class]);
        }
    }

    /**
     * Создает и загружает массив моделей из табулярных данных.
     *
     * Чтобы каждый раз при сохранении не удалять/пересоздавать все табулярные модели заново,
     * можно использовать уже существующие в базе, для обновления при помощи save().
     *
     * В $current передается массив существующих в базе моделей для загрузки. Этот массив должен быть индексирован по
     * такому же ключу как и данные формы.
     *
     * В $data[$formName] передается массив данных отправленных моделей, индексированный по ключу-идентификатору
     * модели. Если модель с таким ключом отсутствует в массиве существующих ($models), то создается новая.
     *
     * Если $current не задан, то все модели будут созданы из данных.
     *
     * Модели из $current, ключ которых отсутствует в данных формы не возвращаются.
     *
     * @param array $currentModels
     * @param array $data табулярные данные, например из $_POST
     * @param ?string $formName
     * @return static[]
     * @throws InvalidConfigException
     */
    public static function loadAll(array $currentModels, array $data, ?string $formName = null): array
    {
        if (empty($currentModels)) {
            $currentModels = [];
        }

        if (! isset($formName)) {
            $formName = static::instance()->formName();
        }

        // корректируем данные под форму
        if ($formName !== '') {
            $data = $data[$formName] ?? [];
        }

        $models = [];
        foreach ($data as $key => $modelData) {
            $model = $currentModels[$key] ?? new static();
            $model->load($modelData, '');
            $models[$key] = $model;
        }

        return $models;
    }
}
