<?php
/*
 * @copyright 2019-2020 Dicr http://dicr.org
 * @author Igor A Tarasov <develop@dicr.org>
 * @license proprietary
 * @version 12.08.20 15:25:50
 */

declare(strict_types = 1);
namespace dicr\site;

use Throwable;
use Yii;
use yii\base\Behavior;
use yii\base\InvalidConfigException;
use yii\db\ActiveRecord;
use yii\db\Transaction;

use function array_slice;
use function call_user_func;

/**
 * Добавляет ActiveRecord метод upsert.
 * - method bool upsert($runValidation = true, $attributes = null)
 *
 * ВНИМАНИЕ!!! Необходимо использовать там где нет autogenerated id.
 *
 * @property ActiveRecord $owner
 */
class UpsertBehavior extends Behavior
{
    /**
     * @inheritDoc
     * @throws InvalidConfigException
     */
    public function attach($owner)
    {
        if (! is_a($owner, ActiveRecord::class)) {
            throw new InvalidConfigException('owner должен быть типа ActiveRecord');
        }

        parent::attach($owner);
    }

    /**
     * Upsert (INSERT on duplicate keys UPDATE)
     *
     * @param bool $runValidation
     * @param ?array $attributes
     * @return bool
     * @throws Throwable
     * @noinspection ParameterDefaultValueIsNotNullInspection
     */
    public function upsert($runValidation = true, $attributes = null): bool
    {
        if ($runValidation) {
            // reset isNewRecord to pass "unique" attribute validator because of upsert
            $this->owner->setIsNewRecord(false);

            if (! $this->owner->validate($attributes)) {
                Yii::warning('Model not inserted due to validation error.', __METHOD__);

                return false;
            }
        }

        if (! $this->owner->isTransactional(ActiveRecord::OP_INSERT)) {
            return $this->upsertInternal($attributes);
        }

        /** @var Transaction $transaction */
        $transaction = call_user_func([$this->owner, 'getDb'])->beginTransaction();
        try {
            $result = $this->upsertInternal($attributes);
            if ($result !== false) {
                $transaction->commit();
            } else {
                $transaction->rollBack();
            }

            return $result;
        } catch (Throwable $e) {
            $transaction->rollBack();
            throw $e;
        }
    }

    /**
     * Insert or update record.
     *
     * @param ?array $attributes
     * @return bool
     */
    protected function upsertInternal($attributes = null): bool
    {
        if (! $this->owner->beforeSave(true)) {
            return false;
        }

        // attributes for INSERT
        $insertValues = $this->owner->getAttributes($attributes);
        $db = call_user_func([$this->owner, 'getDb']);
        $tableName = call_user_func([$this->owner, 'tableName']);

        // attributes for UPDATE exclude primaryKey
        $updateValues = array_slice($insertValues, 0);
        foreach ($db->getTableSchema($tableName)->primaryKey as $key) {
            unset($updateValues[$key]);
        }

        // process update/insert
        if ($db->createCommand()->upsert($tableName, $insertValues, $updateValues ?: false)->execute() === false) {
            return false;
        }

        // reset isNewRecord after save
        $this->owner->isNewRecord = false;

        // call handlers
        $this->owner->afterSave(true, array_fill_keys(array_keys($insertValues), null));

        return true;
    }
}
